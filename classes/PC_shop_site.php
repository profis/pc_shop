<?php
use \Profis\Db\DbException;

/**
 * Class PC_shop_site
 * @property PC_shop_categories_site $categories
 * @property PC_shop_products_site $products
 * @property PC_shop_resources $resources
 */
class PC_shop_site extends PC_shop {
	public function getDeliveryOptions() {
		//return PC_shop_delivery_option_model::get_select_options();
		$m = new PC_shop_delivery_option_model();
		return $m->get_all(array(
			'content' => true,
			'where' => array(
				'enabled' => 1
			),
			'key' => 'code',
			'value' => 'name',
			'order' => 'position',
			//'query_only' => true
		));
	}

	public function getPaymentOptions() {
		//return PC_shop_payment_option_model::get_select_options();
		$m = new PC_shop_payment_option_model();
		return $m->get_all(array(
			'content' => true,
			'where' => array(
				'enabled' => 1
			),
			'key' => 'code',
			'value' => 'name',
			'order' => 'position',
			//'query_only' => true
		));
	}
}

/**
 * Class PC_shop_categories_site
 * @property PC_shop_site $shop
 */
class PC_shop_categories_site extends PC_shop_categories {
	/** @var int */
	public $last_page_id = false;

	/** @var bool */
	public $parse_params = false;

	/** @var bool */
	public $categories_with_resources = false;

	/**
	 * Returns array containing IDs of all category parents.
	 *
	 * @param array $category_data An associative array containing information about category for which parents must be received. Must contain `lft` and `rgt` keys.
	 * @return int[] Array of all parent IDs
	 * @throws DbException
	 */
	public function Get_all_parents(&$category_data) {
		$query = "SELECT id FROM {$this->db_prefix}shop_categories c
			WHERE c.lft < ? and c.rgt > ?
			ORDER by c.lft";
		
		$query_params = array($category_data['lft'], $category_data['rgt']);
		
		$r = $this->prepare($query);
		if( !$r->execute($query_params) )
			throw new DbException($r->errorInfo(), $query, $query_params);
		
		$parents = array();
		while($d = $r->fetch())
			$parents[] = $d['id'];
		return $parents;
	}
	
	/**
	 * Method for getting link to the category (without page route). <br />
	 * Link is being generated by imploding routes up to the top parent like cat1/cat2/cat3/ <br />
	 * If set, permalink is being returned (unless $native_link is set to true) and $page_id will be set to 'false' unless its initial value was 'return_page_id'.
	 * @param int $id category id
	 * @param string $ln language
	 * @param string|boolean $page_id (possible values: false, 'return_page_id') argument for getting pade id of top parent category. Can be set to false (look above)
	 * @param string $native_link argument for getting native (not permalink) link. If $native_link === true, native link will be returned. 
	 * (useful for generating links to the children by simply appending routes)
	 * @return string|boolean
	 */
	public function Get_link_by_id($id, $ln = '', &$page_id = false, &$native_link = '') {
		$initial_page_id = $page_id;
		$initial_native_link = $native_link;
		$page_id = false;
		$link_select = ' concat('.$this->sql_parser->group_concat('link_cc.route', array('separator'=>'/','order'=>array('by'=>'link_c.lft'))).") link, max(link_c.pid) page_id";
				
		$link_select .= ', concat('.$this->sql_parser->group_concat('link_cc.permalink', array('separator'=>'|','order'=>array('by'=>'link_c.lft'))).") permalinks";
		
		$link_join = " LEFT JOIN {$this->db_prefix}shop_categories link_c ON (c.lft BETWEEN link_c.lft and link_c.rgt) AND (link_c.pid = 0 OR link_c.pid is null OR link_c.parent_id = 0)"
		." LEFT JOIN {$this->db_prefix}shop_category_contents link_cc ON link_cc.category_id = link_c.id and link_cc.ln=?";
		
		$query_params = array();
		$query = "SELECT $link_select FROM {$this->db_prefix}shop_categories c " 
		. $link_join 
		. " WHERE c.id = ?";
		
		if (empty($ln)) {
			$ln = $this->site->ln;
		}
		$query_params[] = $ln;
		$query_params[] = $id;
		
		$r = $this->prepare($query);
		$s = $r->execute($query_params);
		
		$this->last_page_id = false;
		
		if ($s and $d = $r->fetch()) {
			$this->last_page_id = $page_id = $d['page_id'];
			$full_route = $d['link'];
			$native_link = $full_route . $this->cfg['trailing_slash'];
			$permalinks = explode('|', $d['permalinks']);
			$permalinks_count = count($permalinks);
			if ($initial_native_link !== true and !empty($permalinks[$permalinks_count - 1])) {
				$full_route = $permalinks[$permalinks_count - 1];
				if ($initial_page_id != 'return_page_id') {
					$page_id = false;
				}
				
			}
			$url = $full_route . $this->cfg['trailing_slash'];
			return $url;
		}
		return false;
	}
		
	/**
	 * Return full category link including page route
	 * @param int $id
	 * @param string $ln
	 * @return string
	 */
	public function Get_full_link_by_id($id, $ln = '') {
		$page_id = false;
		$link = $this->Get_link_by_id($id, $ln, $page_id);
		if ($page_id) {
			$page_url = $this->page->Get_page_link_by_id($page_id, $ln);
			pc_remove_trailing_slash($page_url);
			$link = $page_url . '/' . $link;
		}
		return $link;
	}
	
	/**
	 * @param string $route
	 * @param string $parent_link
	 * @return string
	 */
	public function Get_link_from_route_and_parent_link($route, $parent_link) {
		if (!empty($parent_link)) {
			pc_add_trailing_slash($parent_link);
		}
		return $parent_link . $route . $this->cfg['trailing_slash'];
	}
	
	/**
	 * @param array $category_data
	 * @param string $page_link
	 * @return string
	 */
	public function Get_link_from_data(&$category_data, $page_link = '') {
		if (!empty($category_data['permalink'])) {
			return $category_data['permalink'] . $this->cfg['trailing_slash'];
		}
		if (empty($category_data['link'])) {
			$category_data['link'] = $this->Get_link_by_id($category_data['id']);
		}
		if (!empty($page_link) and strpos($category_data['link'], $page_link) === 0) {
			$page_link = '';
		}
		pc_remove_trailing_slash($page_link);
		return $page_link  . '/' . $category_data['link'];
	}
	
	public function set_order_by_attribute(&$params, $attr_id, $direction = '', $decimal = true) {
		vv($params['joins'], array());
		vv($params['joins_params'], array());
		
		$params['joins'][] = "LEFT JOIN {$this->db_prefix}shop_item_attributes ia_order ON ia_order.item_id=c.id and (ia_order.flags & 1)=1 and ia_order.attribute_id = ?";
		$params['joins_params'][] = $attr_id;
		
		if (!$decimal) {
			$params['order_by'] = 'ia_order.value';
		}
		else {
			$params['order_by'] = 'convert(ia_order.value, decimal(15,4))';
		}
		if (!empty($direction)) {
			$params['order_direction'] = $direction;
		}
	}

	/**
	 * Method used to get category or multiple categories data
	 * @param int|array|null $id - if not null, category data with this id will be returned
	 * @param int|null $parentId - if not null, children of category with this id will be returned
	 * @param int|null $pid - if not null, categories in this page will be returned
	 * @param array $params
	 * Acceptable params:
	 * <ul>
	 *	<li>'filter' - array with keys [c.* cc.*]. c - categories; cc = category_contents</li>
	 *	<li>'errors'</li>
	 *	<li>'paging' - array with keys [page perPage start]</li>
	 *	<li>'product_count' - if true, 'products' will contain product quantity for each category (false by default)</li>
	 *	<li>'load_path' - if true, path for the first fetched category will be loaded: $this->Load_path()</li>
	 *	<li>'link_for_the_first_only' - if true, link will be load for the first fetched category only</li>
	 *	<li>'parse' - array with keys [description attributes resources] if not set, everything will be parsed for fetched categories (very expensive!)</li>
	 * </ul>
	 * @return array|false
	 * @throws Exception
	 * @throws DbException
	 */
	public function Get($id=null, $parentId=null, $pid=null, &$params=array()) {
		return $this->Get_c($id, $parentId, $pid, $params);
	}
	
	/**
	 * Method used to get category or multiple categories data
	 * @param int|array|null $id - if not null, category data with this id will be returned
	 * @param int|null $parentId - if not null, children of category with this id will be returned
	 * @param int|null $pid - if not null, categories in this page will be returned
	 * @param array $params
	 * Acceptable params:
	 * <ul>
	 *	<li>'filter' - array with keys [c.* cc.*]. c - categories; cc = category_contents</li>
	 *	<li>'errors'</li>
	 *	<li>'paging' - array with keys [page perPage start]</li>
	 *	<li>'product_count' - if true, 'products' will contain product quantity for each category (false by default)</li>
	 *	<li>'load_path' - if true, path for the first fetched category will be loaded: $this->Load_path()</li>
	 *	<li>'link_for_the_first_only' - if true, link will be load for the first fetched category only</li>
	 *	<li>'parse' - array with keys [description attributes resources] if not set, everything will be parsed for fetched categories (very expensive!)</li>
	 * </ul>
	 * @return array|false
	 * @throws Exception
	 * @throws DbException
	 */
	public function Get_c($id=null, $parentId=null, $pid=null, &$params=array()) {
		$params_array = $params;
		vv($params, array());
		if (is_array($params)) {
			vv($params['flags'], array());
			if (!in_array(PC_shop_categories::CF_PUBLISHED, $params['flags'])) {
				$params['flags'][] = PC_shop_categories::CF_PUBLISHED;
			}
		}
		
		$this->parse_params = false;
		$this->categories_with_resources = false;
		/** @var PC_params $params */
		if (is_array($params)) {
			$this->core->Init_params($params);
			$params->_params_array = $params_array;
		}
		elseif (isset($params->_params_array)) {
			$params_array = $params->_params_array;
		}
		
		if (is_array($params_array)) {
			if (isset($params_array['parse'])) {
				$this->parse_params = $params_array['parse'];
				if ($this->parse_params != false and !is_array($this->parse_params)) {
					throw new Exception('$params[parse] must be an array or false');
				}
			}
		}
		
		
		$returnOne = !is_null($id) && !is_array($id);
		//format query params and parse filters
		
		$joins_params = array();
		
		$joins_s = '';
		if (isset($params->joins)) if (is_array($params->joins)) {
			$joins_s = ' ' . implode(' ', $params->joins) . ' ';
			if (isset($params->joins_params)) if (is_array($params->joins_params)) {
				$joins_params = $params->joins_params;
			}
		}	
		
		
		$queryParams = array($this->site->ln);
		if (!empty($joins_params)) {
			$queryParams = array_merge($queryParams, $joins_params);
		}
		$queryParams = array_merge($queryParams, array(PC_shop_attributes::ITEM_IS_CATEGORY, PC_shop_attributes::ITEM_IS_CATEGORY));
		
		$queryParams_after_join_item_attributes = $queryParams;

		$queryParams = array($this->site->ln, $this->site->ln);
		
		$where = array();
		$limit = '';
		if (!is_null($id)) {
			if( is_array($id) ) {
				if( empty($id) )
					return array(); // no ids means no results
				$queryParams = array_merge($queryParams, array_values($id));
				$where[] = 'c.id IN (?' . str_repeat(',?', count($id) - 1) . ')';
			}
			else {
				$queryParams[] = $id;
				$where[] = 'c.id=?';
				$limit = ' LIMIT 1';
			}
		}
		else {
			if (!is_null($parentId)) {
				$queryParams[] = $parentId;
				$where[] = 'c.parent_id=?';
			}
			if (!is_null($pid)) {
				$queryParams[] = $pid;
				$where[] = 'c.pid=?';
				$where[] = 'c.parent_id=0';
			}
			if ($params->Has_paging()) {
				$limit = " LIMIT {$params->paging->Get_offset()},{$params->paging->Get_limit()}";
			}
		}

		$generate_link_for_category = true;
		
		v($params->link_for_the_first_only, false);
		
		if (v($params_array['all_children']) && v($params_array['all_children']['page_data'])) {
			$min_max_data = $this->get_all(array(
				'select' => 'min(t.lft) as min_lft, max(t.rgt) as max_rgt',
				'where' => array(
					't.pid = ?'
				),
				'query_params' => array($params_array['all_children']['page_data']['pid']),
				'limit' => 1
			));
			if ($min_max_data) {
				$pseudo_category = array(
					'lft' => $min_max_data['min_lft'] - 1, 
					'rgt' => $min_max_data['max_rgt'] + 1,
					'page_id' => $params_array['all_children']['page_data']['pid']
				);
				$pseudo_category['link'] = '';//v($params_array['all_children']['page_data']['link'], '');
				if (v($params->full_links)) {
					$pseudo_category['link'] = $this->page->Get_page_link_from_data($params_array['all_children']['page_data']);
					$params->full_links = false;
				}
				$params_array['all_children']['category_data'] = $pseudo_category;
			}
			
		}
				
		if (v($params_array['all_children']) && v($params_array['all_children']['category_data'])) {
			$generate_link_for_category = false;
			if (isset($params_array['all_children']['levels']) and $params_array['all_children']['levels'] > 0) {
				$all_category_ids = array();
				$children_category_ids = array();
				if (isset($params_array['all_children']['category_data']['page_id'])) {
					$children_category_ids = $this->get_all(array(
						'where' => array(
							'pid' => $params_array['all_children']['category_data']['page_id']
						),
						'value' => 'id'
					));
				}
				else {
					$children_category_ids = $this->get_all(array(
						'where' => array(
							'parent_id' => $params_array['all_children']['category_data']['id']
						),
						'value' => 'id'
					));
				}
				if (!empty($children_category_ids)) {
					$all_category_ids = array_merge($all_category_ids, $children_category_ids);
				}
				else {
					return array();
					//$all_category_ids[] = 
				}

				for ($index = 1; $index < $params_array['all_children']['levels']; $index++) {
					if (empty($children_category_ids)) {
						break;
					}
					$children_category_ids = $this->get_all(array(
						'where' => array(
							'parent_id' => $children_category_ids
						),
						'value' => 'id'
					));
					$all_category_ids = array_merge($all_category_ids, $children_category_ids);
					
				}
				
				if (!empty($all_category_ids)) {
					$where[] = 'c.id '.$this->sql_parser->in($all_category_ids);
					$queryParams = array_merge($queryParams, $all_category_ids);
				}
				
			}
			else {
				if (isset($params_array['all_children']['category_data']['lft'])) {
					$where[] = 'c.lft > ?';
					$queryParams[] = $params_array['all_children']['category_data']['lft'];
				}

				if (isset($params_array['all_children']['category_data']['rgt'])) {
					$where[] = 'c.rgt < ?';
					$queryParams[] = $params_array['all_children']['category_data']['rgt'];
				}
				
				$hidden_query_params = array();
				$hidden_query = "SELECT lft, rgt FROM {$this->db_prefix}shop_categories c
					WHERE " . $this->get_flag_query_condition(self::CF_PUBLISHED, $hidden_query_params, 'c', '<>');

				$r_hidden = $this->prepare($hidden_query);
				$s_hiden = $r_hidden->execute($hidden_query_params);

				$hidden_ranges = array();
				if ($s_hiden) {
					while ($d_hidden = $r_hidden->fetch()) {
						$add_range = true;
						foreach ($hidden_ranges as $k => $range) {
							if ($range['lft'] <= $d_hidden['lft'] and $range['rgt'] >= $d_hidden['rgt']) {
								$add_range = false;
								break;
							}
						}
						if ($add_range and $d_hidden['lft'] + 1 < $d_hidden['rgt']) {
							$hidden_ranges[$d_hidden['lft']] = array(
								'lft' => $d_hidden['lft'],
								'rgt' => $d_hidden['rgt']
							);
						}
					}
				}
				$not_hidden_conds = array();
				foreach ($hidden_ranges as $key => $range) {
					$not_hidden_conds[] =  "!(c.lft > {$range['lft']} and c.rgt < {$range['rgt']})";
				}
				
			}
			
		}
		
		if (isset($params->flags)) if (is_array($params->flags)) {
			foreach ($params->flags as $flag) {
				$where[] = $this->db->get_flag_query_condition($flag, $queryParams, 'flags', 'c');
			}
		} 
		
		if (is_null($id) and !v($params->no_menu)) {
			$where[] = $this->db->get_flag_query_condition(
				PC_shop_categories::CF_NOMENU, 
				$queryParams, 
				'flags', 
				'c',
				'<>'
			);
		}
		
		
		
		$filter_data = array(
			'having_groups' => array(),
			'inverse_having_groups' => array(),
			'havings' => array(),
			'having_query_params' => array(),

			'use_attribute_concat' => false,
			'use_attribute_values_concat' => false,
			'item_attributes_join_where' => array(),
			'item_attributes_join_params' => array(),
		);
		
		$this->shop->products->set_custom_attribute_filters($params, $filter_data);
		
		if (isset($params->filter)) if (is_array($params->filter)) if (count($params->filter)) {
			foreach ($params->filter as $field=>$value) {
				if (!is_array($value)) {
					$where[] = $field.'=?';
					$queryParams[] = $value;
				}
				else {
					if (isset($value['field'])) {
						$field = $value['field'];
					}
					if (!empty($field)) {
						$op = v($value['op'], '=');
						$where[] = $field . $op . '?';
						$queryParams[] = v($value['value'], '');
					}
					
				}
				
			}
		}
		
		$where[] = $this->get_flag_query_condition(self::CF_PUBLISHED, $queryParams, 'c');
		

		$this->shop->products->set_attribute_filters($params, $filter_data);
		
		$select_attributes_concat = '';
		$select_attributes_values_concat = '';
		if ($filter_data['use_attribute_concat']) {
			$select_attributes_concat = ",group_concat(distinct concat_ws(':', ia.attribute_id, ia.value_id) separator ',') attributes_keys";
		}
		if ($filter_data['use_attribute_values_concat']) {
			$select_attributes_values_concat = ",group_concat(distinct concat_ws(':', ia.attribute_id, ia.value) separator ',') attribute_values";
		}
		
		if (isset($params->having_group)) if (is_array($params->having_group)) if (count($params->having_group)) {
			$having_group = array();
			
			$having_selects = array(
				'attributes_names' => ",group_concat(ac.name separator ';') attributes_names",
				'attributes_values' => ",group_concat(ia.value separator ';') attributes_values",
				'attributes_value_names' => ",group_concat(avc.value separator ';') attributes_value_names"
			);
			
			foreach ($params->having_group as $a_id => $v_id) {
				$single_having = '';
				$field = '';
				if (!is_array($v_id)) {
					$field = $a_id;
					$single_having = "$a_id = ?";
					$filter_data['having_query_params'][] = $v_id;
				}
				else {
					$field = $v_id['field'];
					$single_having = "{$v_id['field']} {$v_id['op']} ?";
					$filter_data['having_query_params'][] = $v_id['query_param'];
				}
				if (isset($having_selects[$field])) {
					$select_attributes_concat .= $having_selects[$field];
					unset($having_selects[$field]);
				}
				$single_having = str_replace(';',' ', $single_having);
				$having_group[] = $single_having;
			}
			$filter_data['havings'][] = '(' . implode(' OR ', $having_group) . ')';
		}
		
		
		if (isset($not_hidden_conds) and !empty($not_hidden_conds)) {
			$where[] = implode(' AND ',  $not_hidden_conds);
		}
		
		$select_product_count = '';
		$join_on_products = '';
		if (v($params->product_count)) {
			$select_product_count = ',count(cp.id) products';
			$join_on_products = " LEFT JOIN {$this->db_prefix}shop_products cp ON cp.category_id=c.id";
		}
		
		$order = '';
		
		if (!v($params->order_by)) {
			$params->order_by = 'c.lft';
		}
		
		if (v($params->order_by)) {
			$order = 'ORDER BY ' . $params->order_by;
			if (v($params->order_direction)) {
				$order .= ' ' . $params->order_direction;
			}
		}
		
		$item_attributes_join_clause = '';
		if (!empty($filter_data['item_attributes_join_where'])) {
			$item_attributes_join_clause = ' AND ' . implode(' AND ', $filter_data['item_attributes_join_where']);
		}
		
		if (!empty($filter_data['item_attributes_join_params'])) {
			$queryParams_after_join_item_attributes = array_merge($queryParams_after_join_item_attributes, $filter_data['item_attributes_join_params']);
		}
		
		
		$having_s = '';
		if (!empty($filter_data['having_groups'])) {
			$group_params = array();
			foreach ($filter_data['having_groups'] as $having_group_key => $having_group) {
				$group_clauses = array();
				foreach ($having_group as $group_scope) {
					$group_clauses[] = $group_scope['where'];
					$filter_data['having_query_params'] = array_merge($filter_data['having_query_params'], $group_scope['query_params']);
				}
				$filter_data['havings'][] = '(' . implode(' OR ', $group_clauses) . ')';
			}
		}
		if (!empty($filter_data['inverse_having_groups'])) {
			$group_params = array();
			$inv_havings = array();
			foreach ($filter_data['inverse_having_groups'] as $having_group_key => $having_group) {
				$group_clauses = array();
				foreach ($having_group as $group_scope) {
					$group_clauses[] = $group_scope['where'];
					$filter_data['having_query_params'] = array_merge($filter_data['having_query_params'], $group_scope['query_params']);
				}
				$inv_havings[] = '(' . implode(' AND ', $group_clauses) . ')';
			}
			$filter_data['havings'][] = '(' . implode(' OR ', $inv_havings) . ')';
			unset($inv_havings);
		}
		if (!empty($filter_data['havings'])) {
			$having_s = ' AND ' . implode(' AND ', $filter_data['havings']);
		}
		
		
		//query!
		$query = "SELECT ".($params->Has_paging()?'SQL_CALC_FOUND_ROWS ':'')."c.*,cc.*"
		. $select_product_count
		//.",".$this->sql_parser->group_concat($this->sql_parser->concat_ws("░", "'id".PC_sql_parser::SP3."'", 'a.id',"'ref".PC_sql_parser::SP3."'",'a.ref',"'name".PC_sql_parser::SP3."'",'ac.name',"'flags".PC_sql_parser::SP3."'",'ia.flags',"'is_custom".PC_sql_parser::SP3."'",'a.is_custom',"'is_searchable".PC_sql_parser::SP3."'",'a.is_searchable',"'item_is_category".PC_sql_parser::SP3."'",'a.is_category_attribute',"'value".PC_sql_parser::SP3."'",'ia.value',"'value_id".PC_sql_parser::SP3."'",'ia.value_id',"'avc_value".PC_sql_parser::SP3."'",'avc.value'), array('separator'=>'▓', 'distinct'=> true))." attributes"
		.",".$this->sql_parser->group_concat($this->sql_parser->concat_ws("░", "'id".PC_sql_parser::SP3."'", 'a.id',"'ref".PC_sql_parser::SP3."'",'a.ref',"'name".PC_sql_parser::SP3."'",'ac.name',"'is_custom".PC_sql_parser::SP3."'",'a.is_custom',"'value".PC_sql_parser::SP3."'",'ia.value',"'value_id".PC_sql_parser::SP3."'",'ia.value_id',"'avc_value".PC_sql_parser::SP3."'",'avc.value'), array('separator'=>'▓', 'distinct'=> true))." attributes"
		.$select_attributes_concat
		.$select_attributes_values_concat	
		." FROM {$this->db_prefix}shop_categories c"
		." LEFT JOIN {$this->db_prefix}shop_category_contents cc ON cc.category_id=c.id and cc.ln=?"
		//count products in this category
		. $joins_s
		.$join_on_products
		//attributes
		." LEFT JOIN {$this->db_prefix}shop_item_attributes ia ON ia.item_id=c.id and (ia.flags & ?)=? " . $item_attributes_join_clause
		." LEFT JOIN {$this->db_prefix}shop_attributes a ON a.id=ia.attribute_id"
		." LEFT JOIN {$this->db_prefix}shop_attribute_contents ac ON ac.attribute_id=a.id and ac.ln=?"
		." LEFT JOIN {$this->db_prefix}shop_attribute_values av ON av.attribute_id=a.id and av.id=ia.value_id"
		." LEFT JOIN {$this->db_prefix}shop_attribute_value_contents avc ON avc.value_id=av.id and avc.ln=?"
		//filters
		.(count($where)?' WHERE '.implode(' and ', $where):'')
		.(!$returnOne?" GROUP BY c.id":""). ' HAVING  NOT (attributes IS NULL) ' . $having_s . ' ' . $order . $limit;
		
		$queryParams = array_merge($queryParams_after_join_item_attributes, $queryParams, $filter_data['having_query_params']);
		
		
		$r = $this->prepare($query);

		$s = $r->execute($queryParams);

		if (!$s) return false;
		
		if ($params->Has_paging()) {
			$rTotal = $this->query("SELECT FOUND_ROWS()");
			if ($rTotal) $params->paging->Set_total($rTotal->fetchColumn());
		}
		$list = array();
		
				
		$cat_ids = array();
		
		$link_for_the_first_generated = false;
		
		while ($d = $r->fetch()) {
			if ($generate_link_for_category &&(!$params->link_for_the_first_only or $params->link_for_the_first_only && !$link_for_the_first_generated)) {
				$real_link = '';
				if (v($params->full_links)) {
					$d['link'] = $this->Get_full_link_by_id($d['id']);
				}
				else {
					$page_id = false;
					$d['link'] = $this->Get_link_by_id($d['id'], '', $page_id, $real_link);
				}
				
				$d['native_link'] = $d['real_link'] = $real_link;
				$link_for_the_first_generated = true;
				//echo "<br /> link:{$d['link']} and real_link:{$d['real_link']} ";
			}
			if (v($params_array['all_children'])) {
				$list[$d['lft']] = $d;
			}
			else {
				$list[] = $d;
			}
			$cat_ids[] = $d['id'];
		}
		
		if (v($params_array['all_children']) && v($params_array['all_children']['category_data'])) {
			 $cat_ids_s = implode(',', $cat_ids);
			if (!empty($cat_ids_s)) {
				$query_params_for_cats_with_resources = array();
				$flags_cond = $this->get_flag_query_condition(PC_shop_resources::RF_IS_CATEGORY, $query_params_for_cats_with_resources);
				$query_for_cats_with_resources = "SELECT distinct(item_id)
					FROM {$this->db_prefix}shop_resources
					WHERE $flags_cond AND item_id IN ($cat_ids_s)";

				$r_cat_with_res = $this->prepare($query_for_cats_with_resources);
				$r_cat_with_res->execute($query_params_for_cats_with_resources);

				$r_cat_with_res_result = $r_cat_with_res->fetchAll(PDO::FETCH_COLUMN, 0);
				if ($r_cat_with_res_result) {
					$this->categories_with_resources = $r_cat_with_res_result;
				}
			}
			else {
				$this->categories_with_resources = array();
			}
				//$query_for_cats_with_resources
			
			//$this->categories_with_resources = explode(',', $cats_with_resources);
		}
		
		if ($this->parse_params and is_array($this->parse_params) and isset($this->parse_params['recources'])) {
			$this->parse_params['resources'] = $this->parse_params['recources'];
		}
		
		$parse_resources = $this->parse_params === false || v($this->parse_params['resources']);
		if (!empty($this->categories_with_resources) and $parse_resources) {
			$file_ids = array();
			$category_ids = $this->categories_with_resources;
			$item_resources = array();
			$flags = 0x0;//PC_shop_resources::RF_AL_PUBLIC;
			$flags |= PC_shop_resources::RF_IS_CATEGORY;
			$query = "SELECT * FROM {$this->db_prefix}shop_resources WHERE item_id ".$this->sql_parser->in($category_ids)." and flags&?=? ORDER BY position";
			$r = $this->db->prepare($query);
			$category_ids[] = $flags;
			$category_ids[] = $flags;
			$s = $r->execute($category_ids);

			if ($s) {
				while ($item_resource = $r->fetch()) {
					if (!isset($item_resources[$item_resource['item_id']])) {
						$item_resources[$item_resource['item_id']] = array();
					}
					$item_resources[$item_resource['item_id']][] = $item_resource;
					$file_ids[] = $item_resource['file_id'];
				}
				PC_shop_item_resources::$item_resources = $item_resources;
				$all_files = $this->gallery->Get_file_by_id($file_ids, null, true);
				//print_pre($all_files);
				$item_files = array();
				
				foreach ($item_resources as $i_id => $i_resources) {
					$i_files = array();
					foreach ($i_resources as $i_resource) {
						$i_files[] = $all_files[$i_resource['file_id']];
					}
					$item_files[$i_id] = $i_files;
				}
				//print_pre($item_files);
				PC_shop_item_resources::$item_files = $item_files;
				//print_pre(PC_shop_item_resources::$item_files);
			}
			
		}
		$list_id_to_parent_id = array();
		$list_lft_to_parent_id = array();
		$list_id_to_lft = array();
		$c_counter = 0;
		foreach ($list as $key => $value) {
			$this->Parse($list[$key]);
			$list_id_to_parent_id[$value['id']] = $value['parent_id'];
			$list_lft_to_parent_id[$value['lft']] = $value['parent_id'];
			$list_id_to_lft[$value['id']] = $value['lft'];
			$c_counter++;
		}

		if (v($params->load_path, false)) {
			if (is_array($list[0])) $this->Load_path($list[0], v($params->page_link, ''));
		}
		
		if (v($params_array['all_children'])) {
			$category_link = $params_array['all_children']['category_data']['link'];
			if (v($params_array['all_children']['category_data']['real_link'])) {
				$category_link = $params_array['all_children']['category_data']['real_link'];
			}
			ksort($list);
			$this->children_datas = array();
			$direct_children = array();
			$empty_parents_data = array();
			foreach ($list as $key => $child) {
				$parent_found = false;
				$parent_lft = 0;
				$my_data = array(
					'lft' => $key,
					'rgt' => $child['rgt'],
					'children' => array()
				);
				$empty_parents_data[$key] = $my_data;
				$closest_parent_lft = false;
				$optimized = true;
				if ($optimized) {
					if (isset($list_lft_to_parent_id[$key])) {
						if (isset($list_id_to_lft[$list_lft_to_parent_id[$key]])) {
							$closest_parent_lft = $list_id_to_lft[$list_lft_to_parent_id[$key]];
						}
					}
				}
				
				if (!$optimized) {
					$my_parent_lft = false;
					$my_parent_rgt = false;
				
					foreach ($this->children_datas as $k => $children_data) {
						if ($children_data['lft'] < $child['lft'] and $children_data['rgt'] > $child['rgt']) {
							if ($my_parent_lft and $my_parent_rgt) {
								if ($children_data['lft'] > $my_parent_lft and $children_data['rgt'] < $my_parent_rgt) {
									$closest_parent_lft = $my_parent_lft =  $children_data['lft'];
									$my_parent_rgt =  $children_data['rgt'];
								}
							}
							else {
								$closest_parent_lft = $my_parent_lft =  $children_data['lft'];
								$my_parent_rgt =  $children_data['rgt'];
							}
						}
					}
				}
				if ($closest_parent_lft) {
					if (!isset($this->children_datas[$closest_parent_lft])) {
						$this->children_datas[$closest_parent_lft] = $empty_parents_data[$closest_parent_lft]; 
					}
					$this->children_datas[$closest_parent_lft]['children'][] = $key;
					$list[$key]['link'] = pc_append_route($list[$closest_parent_lft]['link'], $list[$key]['route']);
				}
				else {
					$direct_children[] = $key;
					$list[$key]['link'] = pc_append_route($category_link, $list[$key]['route']);
				}
				$this->children_datas[$key] = $my_data;
			}

			$new_list = array();
			
			foreach ($direct_children as $key => $direct_child_lft) {
				$category = $list[$direct_child_lft];
				$this->_fill_children_to_category($category, $direct_child_lft, $list);
				$new_list[] = $category;
			}
			
			return $new_list;
			
		}
		
		if ($returnOne) {
			if (!count($list)) return false;
			return $list[0];
		}
		else return $list;
	}

	/**
	 * @param array $category
	 * @param int $lft
	 * @param array $list
	 */
	protected function _fill_children_to_category(&$category, $lft, &$list) {
		$category['children'] = array();
		if (!$this->children_datas[$lft]) {
			return;
		}
		foreach ($this->children_datas[$lft]['children'] as $key => $value) {
			$child = $list[$value];
			$this->_fill_children_to_category($child, $value, $list);
			$category['children'][] = $child;
		}
	}

	/**
	 * @param array $d
	 */
	public function Parse(&$d) {
		$this->Decode_flags($d);
		$parse_description = $this->parse_params === false  || v($this->parse_params['description']);
		if (isset($d['description']) and $parse_description) {
			if (is_array($this->parse_params) and isset($this->parse_params['description_params'])) {
				$this->page->_parse_html_output_params = $this->parse_params['description_params'];
			}
			$this->page->Parse_html_output($d['description']);
		}
		
		//parse attributes
		$parse_attributes = $this->parse_params === false || v($this->parse_params['attributes']);
		if ($parse_attributes) {
			$this->shop->attributes->ParseSQLResult($d['attributes']);
		}
		
		$parse_path = $this->parse_params !== false && v($this->parse_params['path']);
		if ($parse_path) {
			$d['path'] = $this->Get_path($d);
		}
		
		if ($this->parse_params and is_array($this->parse_params) and isset($this->parse_params['recources'])) {
			$this->parse_params['resources'] = $this->parse_params['recources'];
		}
		$parse_resources = $this->parse_params === false || v($this->parse_params['resources']);
		if (is_array($this->categories_with_resources) && !in_array($d['id'], $this->categories_with_resources)) {
			$parse_resources = false;
		}
		if ($parse_resources) {
			$d['resources'] = new PC_shop_item_resources($d['id'], true, false);
		}
		
	}

	/**
	 * @param array $c
	 * @param string $parent_link
	 * @return bool
	 */
	public function Load_path(&$c, $parent_link = '') {
		if ($c['parent_id'] == 0) {
			$c['path'] = array($c);
			return true;
		}
		if (!is_array($c)) return false;
		if (!isset($c['id'])) return false;
		//Original query:
		///*
		$query = "SELECT path.id,path.pid,path.flags,cc.name,cc.custom_name,cc.route,cc.seo_title,path.external_id,"
		.' count(cp.id) products'
		.",".$this->sql_parser->group_concat($this->sql_parser->concat_ws("░", 'a.id', 'ac.name', 'ia.flags', 'a.is_custom', 'a.is_searchable', 'a.is_category_attribute', 'ia.value', 'ia.value_id', 'avc.value'), array('separator'=>'▓', 'distinct'=> true))." attributes"
		." FROM {$this->db_prefix}shop_categories c"
		." LEFT JOIN {$this->db_prefix}shop_categories path ON c.lft between path.lft and path.rgt"
		." LEFT JOIN {$this->db_prefix}shop_category_contents cc ON cc.category_id=path.id and cc.ln=?"
		//count products in this category
		." LEFT JOIN {$this->db_prefix}shop_products cp ON cp.category_id=path.id"
		//generate full route path
		." LEFT JOIN {$this->db_prefix}shop_categories link_c ON path.lft BETWEEN link_c.lft and link_c.rgt"
		." LEFT JOIN {$this->db_prefix}shop_category_contents link_cc ON link_cc.category_id = link_c.id and link_cc.ln=cc.ln"
		//attributes
		." LEFT JOIN {$this->db_prefix}shop_item_attributes ia ON ia.item_id=path.id and (ia.flags & ?)=?"
		." LEFT JOIN {$this->db_prefix}shop_attributes a ON a.id=ia.attribute_id"
		." LEFT JOIN {$this->db_prefix}shop_attribute_contents ac ON ac.attribute_id=a.id and ac.ln=?"
		." LEFT JOIN {$this->db_prefix}shop_attribute_values av ON av.attribute_id=a.id and av.id=ia.value_id"
		." LEFT JOIN {$this->db_prefix}shop_attribute_value_contents avc ON avc.value_id=av.id and avc.ln=?"
		." WHERE c.id=?"
		." GROUP BY path.id ORDER BY path.lft";
		
		$query_params = array($this->site->ln, PC_shop_attributes::ITEM_IS_CATEGORY, PC_shop_attributes::ITEM_IS_CATEGORY, $this->site->ln, $this->site->ln, $c['id']);
		
		//*/
		
		///*
		$query = "SELECT path.id,path.pid,path.flags,path.lft,path.rgt,cc.name,cc.custom_name,cc.route,cc.seo_title,path.external_id"
		.', count(cp.id) products'
		//.",".$this->sql_parser->group_concat($this->sql_parser->concat_ws("░", 'a.id', 'ac.name', 'ia.flags', 'a.is_custom', 'a.is_searchable', 'a.is_category_attribute', 'ia.value', 'ia.value_id', 'avc.value'), array('separator'=>'▓', 'distinct'=> true))." attributes"
		." FROM {$this->db_prefix}shop_categories c"
		." LEFT JOIN {$this->db_prefix}shop_categories path ON c.lft between path.lft and path.rgt"
		." LEFT JOIN {$this->db_prefix}shop_category_contents cc ON cc.category_id=path.id and cc.ln=?"
		//count products in this category
		." LEFT JOIN {$this->db_prefix}shop_products cp ON cp.category_id=path.id"
		//generate full route path
		." LEFT JOIN {$this->db_prefix}shop_categories link_c ON path.lft BETWEEN link_c.lft and link_c.rgt"
		." LEFT JOIN {$this->db_prefix}shop_category_contents link_cc ON link_cc.category_id = link_c.id and link_cc.ln=cc.ln"
		//attributes
		//." LEFT JOIN {$this->db_prefix}shop_item_attributes ia ON ia.item_id=path.id and (ia.flags & ?)=?"
		//." LEFT JOIN {$this->db_prefix}shop_attributes a ON a.id=ia.attribute_id"
		//." LEFT JOIN {$this->db_prefix}shop_attribute_contents ac ON ac.attribute_id=a.id and ac.ln=?"
		//." LEFT JOIN {$this->db_prefix}shop_attribute_values av ON av.attribute_id=a.id and av.id=ia.value_id"
		//." LEFT JOIN {$this->db_prefix}shop_attribute_value_contents avc ON avc.value_id=av.id and avc.ln=?"
		." WHERE c.id=?"
		." GROUP BY path.id ORDER BY path.lft";
		
		$query_params = array($this->site->ln, $c['id']);
		
		//*/
		
		$r = $this->prepare($query);
		
		$s = $r->execute($query_params);
		if (!$s) return false;
		$list = array();
		if ($r->rowCount()) while ($d = $r->fetch()) {
			$parent_link = $d['link'] = $this->Get_link_from_route_and_parent_link($d['route'], $parent_link);
			$this->Parse($d);
			$list[] = $d;
		}
		$c['path'] = $list;
		return true;
	}

	/**
	 * @param array $c
	 * @return bool
	 */
	public function Load_attributes(&$c) {
		$query = "SELECT c.id,c.pid,c.flags,c.external_id"
		//.",".$this->sql_parser->group_concat($this->sql_parser->concat_ws("░", 'a.id', 'ac.name', 'ia.flags', 'a.is_custom', 'a.is_searchable', 'a.is_category_attribute', 'ia.value', 'ia.value_id', 'avc.value'), array('separator'=>'▓', 'distinct'=> true))." attributes"
		.",".$this->sql_parser->group_concat($this->sql_parser->concat_ws("░", "'id".PC_sql_parser::SP3."'", 'a.id',"'ref".PC_sql_parser::SP3."'",'a.ref',"'name".PC_sql_parser::SP3."'",'ac.name',"'is_custom".PC_sql_parser::SP3."'",'a.is_custom',"'value".PC_sql_parser::SP3."'",'ia.value',"'value_id".PC_sql_parser::SP3."'",'ia.value_id',"'avc_value".PC_sql_parser::SP3."'",'avc.value'), array('separator'=>'▓', 'distinct'=> true))." attributes"
		
		." FROM {$this->db_prefix}shop_categories c"
		//attributes
		." LEFT JOIN {$this->db_prefix}shop_item_attributes ia ON ia.item_id=c.id and (ia.flags & ?)=?"
		." LEFT JOIN {$this->db_prefix}shop_attributes a ON a.id=ia.attribute_id"
		." LEFT JOIN {$this->db_prefix}shop_attribute_contents ac ON ac.attribute_id=a.id and ac.ln=?"
		." LEFT JOIN {$this->db_prefix}shop_attribute_values av ON av.attribute_id=a.id and av.id=ia.value_id"
		." LEFT JOIN {$this->db_prefix}shop_attribute_value_contents avc ON avc.value_id=av.id and avc.ln=?"
		." WHERE c.id=?"
		;
		$query_params = array(PC_shop_attributes::ITEM_IS_CATEGORY, PC_shop_attributes::ITEM_IS_CATEGORY, $this->site->ln, $this->site->ln, $c['id']);
		
		$r = $this->prepare($query);
		
		$s = $r->execute($query_params);
		if (!$s) return false;
		$list = array();
		
		if ($d = $r->fetch()) {
			$this->Parse($d);
			$c = array_merge($c, $d);
		}
		return true;
	}
	
}

/**
 * Class PC_shop_categories_site
 * @property PC_shop_site $shop
 */
class PC_shop_products_site extends PC_shop_products {
	
	public function Get_link_by_id($id, $ln = '') {
		if( !$ln )
			$ln = $this->site->ln;
		$product_data = $this->Get_item($id, 'category_id, route', $ln);
		$category_link = '';
		if (v($product_data['category_id'])) {
			$category_link = $this->shop->categories->Get_link_by_id($product_data['category_id'], $ln);
		}
		//echo $category_link;
		$product_route = '';
		if (v($product_data['route'])) {
			$product_route = pc_append_route($category_link, $product_data['route']);
		}
		
		$url = $product_route;
		return $url;
	}
	
	public function Get_full_link_by_id($id, $ln = '') {
		if( !$ln )
			$ln = $this->site->ln;
		$product_data = $this->Get_item($id, 'category_id, route', $ln);
		$category_link = '';
		if (v($product_data['category_id'])) {
			$category_link = $this->shop->categories->Get_full_link_by_id($product_data['category_id'], $ln);
		}
		$product_route = '';
		if (v($product_data['route'])) {
			$product_route = pc_append_route('', $product_data['route']);
		}
		//echo $category_link;
		$url = pc_append_route($category_link, $product_route);
		return $url;
	}
	
	/**
	 * @param array $product_data
	 * @param string $page_link
	 * @return string
	 */
	public function Get_link_from_data(&$product_data, $page_link = '') {
		v($product_data['permalink']);
		if (!empty($product_data['permalink'])) {
			return $product_data['permalink'] . $this->cfg['trailing_slash'];
		}
		if (false and empty($product_data['link'])) {
			$product_data['link'] = $this->Get_link_by_id($product_data['id']);
		}
		pc_remove_trailing_slash($page_link);
		$link = $product_data['link'];
		if (!empty($page_link) and strpos($product_data['link'], $page_link) !== 0) {
			$link = $page_link  . '/' . $product_data['link'];
		}
		return $link;
	}
	
	public function set_order_by_attribute(&$params, $attr_id, $direction = '', $decimal = true) {
		vv($params['joins'], array());
		vv($params['joins_params'], array());
		
		$params['joins'][] = "LEFT JOIN {$this->db_prefix}shop_item_attributes ia_order ON ia_order.item_id=p.id and (ia_order.flags & 2)=2 and ia_order.attribute_id = ?";
		$params['joins_params'][] = $attr_id;
		
		if (!$decimal) {
			$params['order_by'] = 'ia_order.value';
		}
		else {
			$params['order_by'] = 'convert(ia_order.value, decimal(15,4))';
		}
		if (!empty($direction)) {
			$params['order_direction'] = $direction;
		}
	}

	/**
	 * @param int|array|null $id
	 * @param int|array|null $categoryId
	 * @param array $params
	 * @return array|bool
	 * @throws DbException
	 */
	public function Get($id=null, $categoryId=null, &$params=array()) {

		if (isset($params['product_id'])) {
			$id = $params['product_id'];
		}
		$category_data = false;
		if (is_array($categoryId) and isset($categoryId['id'])) {
			$category_data = $categoryId;
			$categoryId = $category_data['id'];
		}
		if (is_array($categoryId)) {
			//echo 'masyvas';
		}
		$id_debug = $id;
		if (is_array($id_debug)) {
			$id_debug = '[' . implode(',' , $id_debug) . ']';
		}

		$this->parse_params = false;
		$params_array = $params;
		if (isset($params['parse'])) {
			$this->parse_params = $params_array['parse'];
		}
		
		$fetch_link = true;
		
		$top_categories = false;
		if ((v($params['all_products_of_page']) or v($params['all_products_of_category']))) {
			$this_category_id = 0;
			if (!is_null($categoryId)) {
				$this_category_id = $categoryId;
			}
			if (!$this_category_id) {
				$this_category_id = $params['all_products_of_page'];
			}
			
			$top_categories_params = array(
				'select' => 'min(t.lft) as min_lft, max(t.rgt) as max_rgt',
				//'select' => 't.id, t.lft, t.rgt',
				'content' => array(
					'select' => 'ct.name, ct.route, ct.permalink'
				),
				'where' => array(
				),
				'query_params' => array(
					$this_category_id
				)
			);
			if (v($params['all_products_of_page'])) {
				$top_categories_params['where'][] = 'pid = ?';
			}
			elseif (v($params['all_products_of_category'])) {
				if (!$this_category_id) {
					$this_category_id = $params['all_products_of_category'];
				}
				$top_categories_params['where'][] = '(parent_id = ? OR t.id = ?)';
				$top_categories_params['query_params'][] = $this_category_id;
			}
			//print_pre($top_categories_params);
			$top_categories = $this->shop->categories->get_one($top_categories_params);
			//$params['categories'] =  $top_categories;
			$params['categories'] = array(
				array(
					'lft' => $top_categories['min_lft'],
					'rgt' => $top_categories['max_rgt'],
				)
			);

			//print_pre($top_categories);
			if (count($top_categories) == 1) {
				
			}
			$categoryId = null;
		}

		$this->core->Init_params($params);
		if (v($params->nothing)) {
			return array();
		}
		//format query params and parse filters
		
		$joins_params = array();
		
		$joins_s = '';
		if (isset($params->joins)) if (is_array($params->joins)) {
			$joins_s = ' ' . implode(' ', $params->joins) . ' ';
			if (isset($params->joins_params)) if (is_array($params->joins_params)) {
				$joins_params = $params->joins_params;
			}
		}	
		
		
		$queryParams = array($this->site->ln);
		if (!empty($joins_params)) {
			$queryParams = array_merge($queryParams, $joins_params);
		}
		$queryParams = array_merge($queryParams, array(PC_shop_attributes::ITEM_IS_PRODUCT, PC_shop_attributes::ITEM_IS_PRODUCT));
		$queryParams_after_join_item_attributes = $queryParams;
		
		$queryParams = array($this->site->ln, $this->site->ln);
		
		$where = array();
		$limit = '';
		$returnOne = false;
		if (!is_null($id)) {
			if (is_array($id)) {
				if (empty($id)) {
					return array();
				}
				$where[] = 'p.id '.$this->sql_parser->in($id);
				$queryParams = array_merge($queryParams, $id);
			}
			else {
				$returnOne = true;
				$queryParams[] = $id;
				$where[] = 'p.id=?';
				$limit = ' LIMIT 1';
			}
		}
		else {
			if (!is_null($categoryId) and !empty($categoryId)) {
				$queryParams[] = $categoryId;
				$where[] = 'p.category_id=?';
			}
		}
		if ($params->Has_paging()) {
			$limit = " LIMIT {$params->paging->Get_offset()},{$params->paging->Get_limit()}";
		}
		
		$groups = array();
		
		$filter_data = array(
			'having_groups' => array(),
			'inverse_having_groups' => array(),
			'havings' => array(),
			'having_query_params' => array(),

			'use_attribute_concat' => false,
			'use_attribute_values_concat' => false,
			'item_attributes_join_where' => array(),
			'item_attributes_join_params' => array(),
		);
		
		
		$this->set_custom_attribute_filters($params, $filter_data);
		
		
		
		if (isset($params->filter)) if (is_array($params->filter)) if (count($params->filter)) {
			foreach ($params->filter as $field=>$value) {
				$this_group = false;
				$this_group_clause = false;
				$this_group_params = array();
				$this_having = false;
				if (is_array($value) and (isset($value['having']) or isset($value['having_group']))) {
					$this_having = true;
				}
				$this_group = false;
				if (is_array($value) and isset($value['group']) and !empty($value['group'])) {
					$this_group = true;
				}
				if (!is_array($value)) {
					if ($field == 'real_price') {
						$filter_data['havings'][] = $field.'=?';
						$filter_data['having_query_params'][] = $value;
					}
					else {
						$where[] = $field.'=?';
						$queryParams[] = $value;
					}
				}
				elseif (isset($value['field']) or isset($value['clause'])) {
					$this_query_params = array();
					$field = v($value['field']);
					if (isset($value['clause'])) {
						$this_where = $value['clause'];
					}
					else {
						$op = v($value['op'], '=');
						$this_where = $field . ' ' . $op . ' ?';
						if (in_array($value['op'], array('full_text', 'full_text_all'))) {
							$this_where = self::get_full_text_clause($value['field'], $value['op']);
							$value['value'] = PC_model::boolean_full_text_filter($value['value']);
							if ($value['op'] == 'full_text_all') {
								$value['value'] = PC_model::add_all_words_fulltext_operators($value['value']);
							}
						}
						if (isset($value['value'])) {
							if (!is_array($value['value'])) {
								$this_query_params[] = $value['value'];
							}
							else {
								$this_query_params = array_merge($this_query_params, $value['value']);
							}

						}
					}

					if (isset($value['query_param'])) {
						$this_query_params[] = $value['query_param'];
					}
					if (isset($value['query_params']) and is_array($value['query_params'])) {
						$this_query_params = array_merge($this_query_params, $value['query_params']);
					}
					if ($field == 'real_price' or $this_having) {
						if (!isset($value['having_group'])) {
							$filter_data['havings'][] = $this_where;
							$filter_data['having_query_params'] = array_merge($filter_data['having_query_params'], $this_query_params);
						}
						else {
							if (!isset($filter_data['having_groups'][$value['having_group']])) {
								$filter_data['having_groups'][$value['having_group']] = array();
							}
							$filter_data['having_groups'][$value['having_group']][] = array(
								'where' => $this_where,
								'query_params' => $this_query_params
							);
						}
					}
					elseif(isset($value['group']) and !empty($value['group'])) {
						if (!isset($groups[$value['group']])) {
							$groups[$value['group']] = array();
						}
						$groups[$value['group']][] = array(
							'where' => $this_where,
							'query_params' => $this_query_params
						);
					}
					else {
						$where[] = $this_where;
						$queryParams = array_merge($queryParams, $this_query_params);
						
					}
				}
				else {
					$where[] = " $field " . $this->sql_parser->in($value);
					$queryParams = array_merge($queryParams, $value);
				}
			}
		}
	
		$this->set_attribute_filters($params, $filter_data);
		
		$select_attributes_concat = '';
		$select_attributes_values_concat = '';
		if ($filter_data['use_attribute_concat']) {
			$select_attributes_concat = ",group_concat(distinct concat_ws(':', ia.attribute_id, ia.value_id) separator ',') attributes_keys";
		}
		if ($filter_data['use_attribute_values_concat']) {
			$select_attributes_values_concat = ",group_concat(distinct concat_ws(':', ia.attribute_id, ia.value) separator ',') attribute_values";
		}
		
		if (isset($params->having_group)) if (is_array($params->having_group)) if (count($params->having_group)) {
			$having_group = array();
			
			$having_selects = array(
				'attributes_names' => ",group_concat(ac.name separator ';') attributes_names",
				'attributes_values' => ",group_concat(ia.value separator ';') attributes_values",
				'attributes_value_names' => ",group_concat(avc.value separator ';') attributes_value_names"
			);
			
			foreach ($params->having_group as $a_id => $v_id) {
				$single_having = '';
				$field = '';
				if (!is_array($v_id)) {
					$field = $a_id;
					$single_having = "$a_id = ?";
					$filter_data['having_query_params'][] = $v_id;
				}
				else {
					$field = $v_id['field'];
					$single_having = "{$v_id['field']} {$v_id['op']} ?";
					$filter_data['having_query_params'][] = $v_id['query_param'];
				}
				if (isset($having_selects[$field])) {
					$select_attributes_concat .= $having_selects[$field];
					unset($having_selects[$field]);
				}
				$single_having = str_replace(';',' ', $single_having);
				$having_group[] = $single_having;
			}
			$filter_data['havings'][] = '(' . implode(' OR ', $having_group) . ')';
		}
		
		if (!isset($params->flags)) {
			$params->flags = array();
		}
		
		if (is_array($params->flags) and !in_array(self::PF_PUBLISHED, $params->flags)) {
			$params->flags[] = self::PF_PUBLISHED;
		}
		
		if (isset($params->flags)) if (is_array($params->flags)) {
			foreach ($params->flags as $flag) {
				$where[] = $this->db->get_flag_query_condition($flag, $queryParams, 'flags', 'p');
			}
		} 
		
		$category_join = '';
		if (isset($params->categories)) if (is_array($params->categories)) {
			$category_join = " LEFT JOIN {$this->db_prefix}shop_categories c ON c.id=p.category_id ";
			$where[] = PC_database_tree::get_between_condition($params->categories, $queryParams, 'c');
		}
		
		$manufacturer_select = '';
		$manufacturer_join = '';
		if (isset($params->manufacturer) and $params->manufacturer or $returnOne) {
			$manufacturer_select = ', mnf.name as manufacturer_name, mnf.code as manufacturer_code';
			$manufacturer_join = " LEFT JOIN {$this->db_prefix}shop_manufacturers mnf ON mnf.id=p.manufacturer_id";
		}
		
		if (!empty($filter_data['item_attributes_join_params'])) {
			$queryParams_after_join_item_attributes = array_merge($queryParams_after_join_item_attributes, $filter_data['item_attributes_join_params']);
		}
		
		//query!
	
		$order = '';
		
		if (v($params->order_by)) {
			$order = 'ORDER BY ' . $params->order_by;
			if (v($params->order_direction)) {
				$order .= ' ' . $params->order_direction;
			}
		}

		if (!empty($groups)) {
			$group_params = array();
			foreach ($groups as $group_key => $group) {
				$group_clauses = array();
				foreach ($group as $group_scope) {
					$group_clauses[] = $group_scope['where'];
					$queryParams = array_merge($queryParams, $group_scope['query_params']);
				}
				$where[] = '(' . implode(' OR ', $group_clauses) . ')';
			}
		}
		
		$having_s = '';
		if (!empty($filter_data['having_groups'])) {
			$group_params = array();
			foreach ($filter_data['having_groups'] as $having_group_key => $having_group) {
				$group_clauses = array();
				foreach ($having_group as $group_scope) {
					$group_clauses[] = $group_scope['where'];
					$filter_data['having_query_params'] = array_merge($filter_data['having_query_params'], $group_scope['query_params']);
				}
				$filter_data['havings'][] = '(' . implode(' OR ', $group_clauses) . ')';
			}
		}
		if (!empty($filter_data['inverse_having_groups'])) {
			$group_params = array();
			$inv_havings = array();
			foreach ($filter_data['inverse_having_groups'] as $having_group_key => $having_group) {
				$group_clauses = array();
				foreach ($having_group as $group_scope) {
					$group_clauses[] = $group_scope['where'];
					$filter_data['having_query_params'] = array_merge($filter_data['having_query_params'], $group_scope['query_params']);
				}
				$inv_havings[] = '(' . implode(' AND ', $group_clauses) . ')';
			}
			$filter_data['havings'][] = '(' . implode(' OR ', $inv_havings) . ')';
			unset($inv_havings);
		}
		if (!empty($filter_data['havings'])) {
			$having_s = ' HAVING ' . implode(' AND ', $filter_data['havings']);
		}
		
		$cat_content_select = '';
		$cat_join = '';
		
		if (v($params->select['category_content'])) {
			$cat_content_select = ', ' . $params->select['category_content'];
			$cat_content_join = " LEFT JOIN {$this->db_prefix}shop_category_contents cc ON cc.category_id=p.category and cc.ln=?";
		}
		$select_s = '';
		if (v($params->select['pre'])) {
			$select_s .= $params->select['pre'] .  ', ';
		}
		$group_s = '';
		if (v($params->group_by)) {
			$group_s = ', ' . $params->group_by;
		}
		
		$item_attributes_join_clause = '';
		if (!empty($filter_data['item_attributes_join_where'])) {
			$item_attributes_join_clause = ' AND ' . implode(' AND ', $filter_data['item_attributes_join_where']);
		}
		
		$item_attributes_ids_clause = '';
		if (isset($params->attribute_ids) and is_array($params->attribute_ids)) {
			$item_attributes_ids_clause = ' AND ia.attribute_id ' . $this->sql_parser->in($params->attribute_ids);
			$queryParams_after_join_item_attributes = array_merge($queryParams_after_join_item_attributes, $params->attribute_ids);
		}
		
		$prices_join = '';
		$real_price_select = '';
		if (!v($params->no_price)) {
			$prices_join = " LEFT JOIN {$this->db_prefix}shop_product_prices ppr ON ppr.product_id=p.id";
			$real_price_select = "LEAST(p.price, (p.price - IFNULL(p.discount, 0)), ROUND(p.price * (100 - IFNULL(p.percentage_discount, 0)) / 100, 2)) as real_price,"
			. "group_concat(distinct concat_ws(':', ppr.c_id, ppr.quantity, ppr.price) separator ';') product_prices, ";
		}
		
		$attributes_select = '';
		$attributes_join = '';
		if (!v($params->no_attributes)) {
	
		}
		
		$select_s = ' ' . $select_s . ' ';
		$query = $qry = "SELECT " . (v($params->sql_no_cache)?' SQL_NO_CACHE ':'') .($params->Has_paging()?'SQL_CALC_FOUND_ROWS ':'').$select_s."p.*,".$real_price_select.v($params->content_select, "pc.*").","
		. $this->sql_parser->group_concat($this->sql_parser->concat_ws("░", "'id".PC_sql_parser::SP3."'", 'a.id', "'ref".PC_sql_parser::SP3."'",'a.ref',"'category_id".PC_sql_parser::SP3."'",'a.category_id', "'name".PC_sql_parser::SP3."'",'ac.name', "'flags".PC_sql_parser::SP3."'",'ia.flags', "'is_custom".PC_sql_parser::SP3."'",'a.is_custom', "'is_searchable".PC_sql_parser::SP3."'",'a.is_searchable', "'item_is_category".PC_sql_parser::SP3."'",'a.is_category_attribute', "'value".PC_sql_parser::SP3."'",'ia.value', "'value_id".PC_sql_parser::SP3."'",'ia.value_id', "'ia_id".PC_sql_parser::SP3."'",'ia.id', "'avc_value".PC_sql_parser::SP3."'",'avc.value'), array('separator'=>'▓', 'distinct'=> true, 'order' => array('by' => 'a.position')))." attributes"
		//. $this->sql_parser->group_concat($this->sql_parser->concat_ws("░", "'id".PC_sql_parser::SP3."'", 'a.id', "'ref".PC_sql_parser::SP3."'",'a.ref', "'name".PC_sql_parser::SP3."'",'ac.name', "'flags".PC_sql_parser::SP3."'",'ia.flags', "'is_custom".PC_sql_parser::SP3."'",'a.is_custom', "'is_searchable".PC_sql_parser::SP3."'",'a.is_searchable', "'item_is_category".PC_sql_parser::SP3."'",'a.is_category_attribute',"'value".PC_sql_parser::SP3."'",'ia.value',"'value_id".PC_sql_parser::SP3."'",'ia.value_id',"'avc_value".PC_sql_parser::SP3."'",'avc.value'), array('separator'=>'▓', 'distinct'=> true))." attributes"
		//. $this->sql_parser->group_concat($this->sql_parser->concat_ws("░", 'a.id', 'a.ref', 'ac.name', 'ia.flags', 'a.is_custom', 'a.is_searchable', 'a.is_category_attribute', 'ia.value_id', 'avc.value'), array('separator'=>'▓', 'distinct'=> true))." attributes"
		. $select_attributes_concat . $select_attributes_values_concat
		. $manufacturer_select
		. " FROM {$this->db_prefix}shop_products p"
		. " LEFT JOIN {$this->db_prefix}shop_product_contents pc ON pc.product_id=p.id and pc.ln=?"
		. $joins_s
		. $category_join
		. $manufacturer_join
		//attributes
		." LEFT JOIN {$this->db_prefix}shop_item_attributes ia ON ia.item_id=p.id and (ia.flags & ?)=?" .  $item_attributes_join_clause . $item_attributes_ids_clause
		." LEFT JOIN {$this->db_prefix}shop_attributes a ON a.id=ia.attribute_id"
		." LEFT JOIN {$this->db_prefix}shop_attribute_contents ac ON ac.attribute_id=a.id and ac.ln=?"
		." LEFT JOIN {$this->db_prefix}shop_attribute_values av ON av.attribute_id=a.id and av.id=ia.value_id"
		." LEFT JOIN {$this->db_prefix}shop_attribute_value_contents avc ON avc.value_id=av.id and avc.ln=?"
		. $prices_join
		//filters
		.(count($where)?' WHERE '.implode(' and ', $where):'')
		." GROUP BY p.id". ' ' . $group_s . $having_s . ' ' . $order . ' ' . $limit ;

		$queryParams = array_merge($queryParams_after_join_item_attributes, $queryParams, $filter_data['having_query_params']);
		
		$ckey = "pcs.get." . md5($query . serialize($queryParams) . serialize($params_array));
		$total = null;
		$qdata = $this->cache->get($ckey);
		if( $qdata !== null ) {
			if( $qdata === false )
				return false;
			if($qdata[0] !== null)
				$params->paging->Set_total($qdata[0]);
			$list = &$qdata[1];
		}
		else {
			$r = $this->prepare($query);
			$s = $r->execute($queryParams);

			if (!$s)
				throw new DbException($r->errorInfo(), $query, $queryParams);

			if ($params->Has_paging()) {
				$rTotal = $this->query("SELECT FOUND_ROWS()");
				if ($rTotal) $params->paging->Set_total($total = $rTotal->fetchColumn());
			}
			$list = array();

			$category_links = array();
			
			if ($category_data and isset($category_data['link']) and !empty($category_data['link'])) {
				$category_links[$category_data['id']] = $category_data['link'];
			}
			
			if ($categoryId and !isset($category_links[$categoryId])) {
				$shop_categories_site = $this->core->Get_object('PC_shop_categories_site');
				if (v($params->full_links)) {
					$category_links[$categoryId] = $shop_categories_site->Get_full_link_by_id($categoryId);
				}
				else {
					$category_links[$categoryId] = $shop_categories_site->Get_link_by_id($categoryId);
				}
			}
			$this->_price_attribute_ids = array();
			while ($d = $r->fetch()) {
				if (isset($d['category_id']) and !isset($category_links[$d['category_id']])) {
					$shop_categories_site = $this->core->Get_object('PC_shop_categories_site');
					if (v($params->full_links)) {
						$category_links[$d['category_id']] = $shop_categories_site->Get_full_link_by_id($d['category_id']);
					}
					else {
						$category_links[$d['category_id']] = $shop_categories_site->Get_link_by_id($d['category_id']);
					}
				}
				$this->Parse($d);
				$d['link'] = pc_append_route($category_links[$d['category_id']], $d['route']);
				if (v($params->id_keys)) {
					$list[$d['id']] = $d;
				}
				else {
					$list[] = $d;
				}
				
			}

			if ($returnOne && empty($list) )
				$this->cache->set($ckey, false, 3600*24);
			else
				$this->cache->set($ckey, Array($total, &$list), 3600*24);
		}

		if ($returnOne) {
			if (!count($list)) return false;
			return $list[0];
		}
		else return $list;
	}
	
	public function set_custom_attribute_filters($params, &$filter_data = array()) {
		if (isset($params->custom_attribute_filter)) if (is_array($params->custom_attribute_filter)) if (count($params->custom_attribute_filter)) {
			$filter_data['use_attribute_concat'] = true;
			foreach ($params->custom_attribute_filter as $a_id => $v_id) {
				$this_having = '';
				$this_having_query_params = array();
				$having_group = $inverse_having_group = false;
				$v_op = '=';
				$clause = '';
				$this_query_params = array();
				if (is_array($v_id)) {
					//print_pre($v_id);
					if (isset($v_id['having_group'])) {
						$having_group = $v_id['having_group'];
					}
					if (isset($v_id['inverse_having_group'])) {
						$inverse_having_group = $v_id['inverse_having_group'];
					}
					$a_id = v($v_id['attr_id'], $a_id);
					$clause = v($v_id['clause'], '');
					$v_op = v($v_id['op'], '=');
					$this_query_params = v($v_id['query_params'], $this_query_params);
					$v_id = v($v_id['value'], '');
				}
				if (!empty($v_id) or !empty($clause)) {
					$this_having = "FIND_IN_SET(?, attributes_keys)";
					$this_having_query_params[] = "$a_id";
					$expression = '?';
					if ($v_op != '=') {
						$expression = "convert(?, decimal(10,4))";
					}
					$filter_data['item_attributes_join_params'][] = $a_id;
					$filter_data['item_attributes_join_params'][] = $a_id;
					if (empty($clause)) {
						$filter_data['item_attributes_join_params'][] = $v_id;
						$clause = "ia.value $v_op $expression";
					}
					if (!empty($this_query_params)) {
						$filter_data['item_attributes_join_params'] = array_merge($filter_data['item_attributes_join_params'], $this_query_params);
					}
					$filter_data['item_attributes_join_where'][] = "(ia.attribute_id <> ? OR ia.attribute_id = ? AND $clause)";
					
				}
				if ($having_group) {
					$filter_data['having_groups'][$having_group][] = array(
						'where' => $this_having,
						'query_params' => $this_having_query_params
					);
				}
				else if($inverse_having_group) {
					$filter_data['inverse_having_groups'][$inverse_having_group][] = array(
						'where' => $this_having,
						'query_params' => $this_having_query_params
					);
				}
				else {
					$filter_data['havings'][] = $this_having;
					$filter_data['having_query_params'] = array_merge($filter_data['having_query_params'], $this_having_query_params);
				}
									
			}
		}
		
	}
	
	public function set_attribute_filters($params, &$filter_data = array()) {
		
		/*
		 $filter_data = array(
			'having_groups' => array(),
			'inverse_having_groups' => array(),
			'havings' => array(),
			'having_query_params' => array(),

			'use_attribute_concat' => false,
			'use_attribute_values_concat' => false,
			'item_attributes_join_where' => array(),
			'item_attributes_join_params' => array(),
		);
		 */
		
		
		if (isset($params->attribute_filter)) if (is_array($params->attribute_filter)) if (count($params->attribute_filter)) {
			
			foreach ($params->attribute_filter as $a_id => $v_id) {
				$this_having = '';
				$this_having_query_params = array();
				$having_group = $inverse_having_group = false;
				if (is_array($v_id) and isset($v_id['having_group'])) {
					$having_group = $v_id['having_group'];
					$a_id = v($v_id['attr_id'], $a_id);
					$v_id = v($v_id['value'], '');
				}
				else if (is_array($v_id) and isset($v_id['inverse_having_group'])) {
					$inverse_having_group = $v_id['inverse_having_group'];
					$a_id = v($v_id['attr_id'], $a_id);
					$v_id = v($v_id['value'], '');
				}
				if (!is_array($v_id)) {
					if (!empty($v_id)) {
						$not = '';
						$concat_key = 'attributes_keys';
						if (strpos($v_id, '!') === 0) {
							$v_id = substr($v_id, 1);
							$not = 'NOT ';
						}
						if (strpos($v_id, '=') === 0) {
							$v_id = substr($v_id, 1);
							$concat_key = 'attribute_values';
							$filter_data['use_attribute_values_concat'] = true;
						}
						else {
							$filter_data['use_attribute_concat'] = true;
						}
						$this_having = $not . "FIND_IN_SET(?, $concat_key)";
						$this_having_query_params[] = "$a_id:$v_id";
					}
					else {
						$filter_data['use_attribute_concat'] = true;
						$this_having = "(attributes_keys like ? OR attributes_keys like ?)";
						$this_having_query_params[] = "$a_id:%";
						$this_having_query_params[] = "%,$a_id:%";
					}
				}
				elseif (!empty($v_id)) {
					$having_ors = array();
					foreach ($v_id as $vv_id) {
						$filter_data['use_attribute_concat'] = true;
						$having_ors[] = "FIND_IN_SET(?, attributes_keys)";
						$this_having_query_params[] = "$a_id:$vv_id";
					}
					$this_having = '(' . implode(' OR ', $having_ors) . ')';
					
				}
				if ($having_group) {
					$filter_data['having_groups'][$having_group][] = array(
						'where' => $this_having,
						'query_params' => $this_having_query_params
					);
				}
				else if ($inverse_having_group) {
					$filter_data['inverse_having_groups'][$inverse_having_group][] = array(
						'where' => $this_having,
						'query_params' => $this_having_query_params
					);
				}
				else {
					$filter_data['havings'][] = $this_having;
					$filter_data['having_query_params'] = array_merge($filter_data['having_query_params'], $this_having_query_params);
				}
			}
		}
	}

	static function parseAttributeValue($id, $value) {
		$result = array('id' => $id);
		if( preg_match('/^(.*)(#[0-9a-f]{6})$/i', $value, $mtc) ) {
			$result['color'] = $mtc[2];
			$value = trim($mtc[1]);
		}
		$result['value'] = $value;
		return $result;
	}

	public function Parse(&$d) {
		$this->Decode_flags($d);

		$parse_attributes = $this->parse_params === false || v($this->parse_params['attributes']);
		if ($parse_attributes) {
			$d['attributes'] = array();
			$d['attribute_index'] = array();
			$d['combinations'] = array();
			$d['combination_groups'] = array();
			$d['price_combinations'] = array();
			$d['price_combination_groups'] = array();
			/** @var PC_shop_attribute_item_model $model */
			$model = $this->core->Get_object('PC_shop_attribute_item_model');
			// Do not use p.quantity, use p.items_left instead. p.quantity is supposed to be used for getting price depending on ordered quantity.
			$select = '';
			$join = '';
			$order = '';
			$queryParams = array();
			for( $idx = 1; $idx <= PC_shop::$COMBINATION_ATTRIBUTE_COUNT; $idx++ ) {
				$tbl = ($idx > 1) ? ('ia' . $idx) : 't';
				$suffix = ($idx > 1) ? $idx : '';
				$prevTbl = ($idx > 2) ? ('ia' . ($idx - 1)) : 't';

				$select .= "{$tbl}.attribute_id AS attribute{$suffix}_id,";
				$select .= "a{$suffix}.ref AS ref{$suffix},";
				$select .= "ac{$suffix}.name AS name{$suffix},";
				$select .= "{$tbl}.id AS ia{$suffix}_id,";
				$select .= "{$tbl}.value_id AS value{$suffix}_id,";
				$select .= "IF({$tbl}.value_id IS NULL, {$tbl}.id, {$tbl}.value_id) AS combined_value{$suffix}_id,";
				$select .= "IF(avc{$suffix}.value IS NULL, {$tbl}.value, avc{$suffix}.value) AS value{$suffix},";

				if( $idx > 1 )
					$join .= " LEFT JOIN {$this->db_prefix}shop_item_attributes {$tbl} ON {$tbl}.id = {$prevTbl}.next_attribute_id AND ({$tbl}.flags & " . PC_shop_attributes::ITEM_IS_PRODUCT . ") = " . PC_shop_attributes::ITEM_IS_PRODUCT;
				$join .= " LEFT JOIN {$this->db_prefix}shop_attributes a{$suffix} ON a{$suffix}.id = {$tbl}.attribute_id";
				$join .= " LEFT JOIN {$this->db_prefix}shop_attribute_contents ac{$suffix} ON ac{$suffix}.attribute_id = {$tbl}.attribute_id AND ac{$suffix}.ln=?";
				$join .= " LEFT JOIN {$this->db_prefix}shop_attribute_values av{$suffix} ON av{$suffix}.id={$tbl}.value_id";
				$join .= " LEFT JOIN {$this->db_prefix}shop_attribute_value_contents avc{$suffix} ON avc{$suffix}.value_id={$tbl}.value_id AND avc{$suffix}.ln=?";

				$order .= ",a{$suffix}.position, av{$suffix}.position";

				$queryParams[] = $this->site->ln;
				$queryParams[] = $this->site->ln;
			}
			$queryParams[] = $d['id'];
			$combinations = $model->get_all(array(
				'select' => $select . '
					p.price, p.price_diff, p.discount, p.items_left, p.info_1, p.info_2, p.info_3, p.weight, p.volume, p.length, p.width, p.height
				',
				'where' => 't.item_id = ? AND t.level=1 AND (t.flags & ' . PC_shop_attributes::ITEM_IS_PRODUCT . ') = ' . PC_shop_attributes::ITEM_IS_PRODUCT,
				'query_params' => $queryParams,
				'order' => ltrim($order, ','),
				'join' => $join . " LEFT JOIN {$this->db_prefix}shop_product_prices p ON p.product_id = t.item_id AND p.attribute_id = t.attribute_id AND (p.attribute_value_id <> 0 AND p.attribute_value_id = t.value_id OR p.attribute_item_id <> 0 AND p.attribute_item_id = t.id)",
			));
			foreach( $combinations as $item ) {
				$grouping = array();
				$val = array();

				for( $idx = 1; ; $idx++ ) {
					$suffix = ($idx > 1) ? $idx : '';
					if( !array_key_exists('attribute' . $suffix . '_id', $item) )
						break;
					$attrId = $item['attribute' . $suffix . '_id'];
					if( $idx == 1 || $attrId ) {
						$grouping[] = $attrId;
						$val[] = $item['combined_value' . $suffix . '_id'];
						if( !isset($d['attributes'][$item['attribute' . $suffix . '_id']]) ) {
							$d['attributes'][$attrId] = array(
								'id' => $attrId,
								'ref' => $item['ref' . $suffix],
								'name' => $item['name' . $suffix],
								'values' => array()
							);
							$d['attribute_index'][$item['ref' . $suffix]] = &$d['attributes'][$attrId];
						}
						$d['attributes'][$attrId]['values'][$item['combined_value' . $suffix . '_id']] = self::parseAttributeValue($item['value' . $suffix . '_id'], $item['value' . $suffix]);
					}
				}

				$group = implode(',', $grouping);
				$val = implode(',', $val);
				if( !isset($d['combinations'][$group]) ) {
					$d['combination_groups'][] = $grouping;
					$d['combinations'][$group] = array();
				}

				// convert numeric types
				$item['price'] = floatval($item['price']);
				$item['price_diff'] = floatval($item['price_diff']);
				$item['discount'] = floatval($item['discount']);
				$item['items_left'] = intval($item['items_left']);
				$item['weight'] = floatval($item['weight']);
				$item['volume'] = floatval($item['volume']);
				$item['width'] = floatval($item['width']);
				$item['height'] = floatval($item['height']);
				$item['length'] = floatval($item['length']);


				if( $item['items_left'] !== null )
					$item['items_left'] = intval($item['items_left']); // it is returned as string, but we need a number for javascript

				if( isset($d['combinations'][$group][$val]) ) {
					$c = &$d['combinations'][$group][$val];
					if( $item['price'] > 0 )
						$c['price'] = $item['price'];
					if( $item['price_diff'] > 0 )
						$c['price_diff'] = $item['price_diff'];
					if( $item['discount'] > 0 )
						$c['discount'] = $item['discount'];
					if( $item['items_left'] !== null )
						$c['items_left'] = $item['items_left'];
					if( $item['info_1'] !== '' )
						$c['info_1'] = $item['info_1'];
					if( $item['info_2'] !== '' )
						$c['info_2'] = $item['info_2'];
					if( $item['info_3'] !== '' )
						$c['info_3'] = $item['info_3'];
					if( $item['weight'] > 0 )
						$c['weight'] = $item['weight'];
					if( $item['volume'] > 0 )
						$c['volume'] = $item['volume'];
					if( $item['width'] > 0 )
						$c['width'] = $item['width'];
					if( $item['height'] > 0 )
						$c['height'] = $item['height'];
					if( $item['length'] > 0 )
						$c['length'] = $item['length'];
				}
				else {
					$d['combinations'][$group][$val] = $item;

				}

				if( $item['price'] > 0 || $item['price_diff'] > 0 || $item['discount'] > 0 || $item['items_left'] !== null ) {
					if( !isset($d['price_combinations'][$group]) ) {
						$d['price_combination_groups'][] = $grouping;
						$d['price_combinations'][$group] = array();
					}
					if( isset($d['price_combinations'][$group][$val]) ) {
						$c = &$d['price_combinations'][$group][$val];
						if( $item['price'] > 0 )
							$c['price'] = $item['price'];
						if( $item['price_diff'] > 0 )
							$c['price_diff'] = $item['price_diff'];
						if( $item['discount'] > 0 )
							$c['discount'] = $item['discount'];
						if( $item['items_left'] !== null )
							$c['items_left'] = $item['items_left'];
					}
					else
						$d['price_combinations'][$group][$val] = array(
							'price' => $item['price'],
							'price_diff' => $item['price_diff'],
							'discount' => $item['discount'],
							'items_left' => $item['items_left'],
						);
				}
			}
		}
		
		
		$parse_description = $this->parse_params === false  || v($this->parse_params['description']);
		if (isset($d['description']) and $parse_description) {
			$this->page->Parse_html_output($d['description'], $d['short_description']);
		}
		
		if ($this->parse_params and is_array($this->parse_params) and isset($this->parse_params['recources'])) {
			$this->parse_params['resources'] = $this->parse_params['recources'];
		}
		$parse_resources = $this->parse_params === false || v($this->parse_params['resources']);
		if ($parse_resources) {
			$d['resources'] = new PC_shop_item_resources($d['id']);
		}
		
		if (isset($d['product_prices'])) {
			$decoded_prices = array();
			$prices = explode(';', $d['product_prices']);
			foreach ($prices as $price_string) {
				@list($c_id,$quantity,$price) = explode(':', $price_string);
				if (!empty($price)) {
					$decoded_prices[$c_id] = $price;
				}
			}
			$d['prices'] = $decoded_prices;
		}


	}

	/**
	 * @param int $productId Id pf the product
	 * @param array $attributes An associative array of desired product attributes for which quantity must be calculated
	 * @return int|null
	 */
	public function Get_product_quantity($productId, $attributes) {
		$select = array('t.quantity');
		$where = array('t.id = ?');
		$order = 't.id';
		$params = array($productId);
		$join = array();
		if( !empty($attributes) && is_array($attributes) ) {
			$in = array();
			foreach( $attributes as $attrKey => $attrVal )
				$in[] = '(' . intval($attrKey) . ',' . intval($attrVal) . ')';
			$in = '(' . implode(',', $in) . ')';

			$select[] = 'pp.items_left';

			$where[] = '((ia1.attribute_id,ia1.value_id) IN ' . $in . ' OR (ia1.attribute_id,ia1.id) IN ' . $in . ')';
			$join[] = "INNER JOIN {$this->db_prefix}shop_item_attributes ia1 ON ia1.item_id=t.id AND (ia1.flags & 2) = 2 AND ia1.level = 1";

			for( $i = 2; $i <= PC_shop::$COMBINATION_ATTRIBUTE_COUNT; $i++ ) {
				$j = $i - 1;
				$where[] = "(ia{$i}.value_id IS NULL OR (ia{$i}.attribute_id,ia{$i}.value_id) IN {$in} OR (ia{$i}.attribute_id,ia{$i}.id) IN {$in})";
				$join[] = "LEFT JOIN {$this->db_prefix}shop_item_attributes ia{$i} ON ia{$i}.id=ia{$j}.next_attribute_id";
			}

			$join[] = "INNER JOIN {$this->db_prefix}shop_product_prices pp ON pp.product_id = t.id AND ((pp.attribute_id = ia1.attribute_id AND pp.attribute_value_id = ia1.value_id AND pp.attribute_item_id = 0) OR pp.attribute_item_id=ia1.id)";

			$order = 'ia1.position DESC';
		}

		/** @var PC_shop_product_model $model */
		$model = $this->core->Get_object('PC_shop_product_model');
		$results = $model->get_all(array(
			'select' => implode(', ', $select),
			'where' => implode(' AND ', $where),
			'query_params' => $params,
			'order' => $order,
			'join' => implode(' ', $join),
		));
		if( !empty($attributes) && is_array($attributes) ) {
			foreach( $results as $result )
				if( isset($result['items_left']) )
					return $result['items_left'];
		}
		$qty = $results[0]['quantity'];
		if ($qty !== null)
			$qty = intval($qty);
		return $qty;
	}

	/**
	 * Processes attribute selection for the given product and applies changes that are specific for such attribute
	 * collection. For example, if product has the price 500, but red colored product has price 550 and blue colored
	 * has price 540, then, when we apply red color attribute, price of the product on output becomes 550.
	 *
	 * @param array $product A product to apply attributes to.
	 * @param array $attributes An associative array of attributes to apply to the product. Key must be attribute id and value must be it's value id.
	 * @return array A product with applied attributes.
	 */
	public function applyAttributes($product, $attributes) {
		if( isset($product['applied_attributes']) )
			return $product;

		$currencyId = $this->price->get_user_currency_id();

		if( isset($product['prices'][$currencyId]) && $product['prices'][$currencyId] > 0 )
			$price = $product['prices'][$currencyId];
		else
			$price = $this->price->get_price_in_user_currency($product['price']);

		$discount = $this->price->get_price_in_user_currency($product['discount']);

		$attributes_strings = array();
		$attribute_values_strings = array();
		$attributes_info = array();
		$applied_attributes = array();

		$result = $product;
		$result['info_1'] = null;
		$result['info_2'] = null;
		$result['info_3'] = null;

		if( is_array($attributes) ) {
			if( isset($product['combination_groups']) ) {
				foreach ($product['combination_groups'] as $groupAttributes) {
					$groupId = implode(',', $groupAttributes);
					if (isset($product['combinations'][$groupId])) {
						$val = array();
						foreach ($groupAttributes as $attrId)
							$val[] = isset($attributes[$attrId]) ? $attributes[$attrId] : null;
						$val = implode(',', $val);
						if (isset($product['combinations'][$groupId][$val])) {
							$comboData = &$product['combinations'][$groupId][$val];
							if ($comboData['price'] > 0) {
								$price = $this->price->get_price_in_user_currency($comboData['price']);
								$discount = 0;
							}
							if ($comboData['price_diff'] > 0)
								$price += $this->price->get_price_in_user_currency($comboData['price_diff']);
							if ($comboData['discount'] > 0)
								$discount = $this->price->get_price_in_user_currency($comboData['discount']);

							if (isset($comboData['items_left']))
								$result['quantity'] = $comboData['items_left'];
							if (isset($comboData['info_1']))
								$result['info_1'] = $comboData['info_1'];
							if (isset($comboData['info_2']))
								$result['info_2'] = $comboData['info_2'];
							if (isset($comboData['info_3']))
								$result['info_3'] = $comboData['info_3'];

							if ($comboData['weight'] > 0)
								$result['weight'] = $comboData['weight'];
							if ($comboData['volume'] > 0)
								$result['volume'] = $comboData['volume'];
							if ($comboData['width'] > 0)
								$result['width'] = $comboData['width'];
							if ($comboData['length'] > 0)
								$result['length'] = $comboData['length'];
							if ($comboData['height'] > 0)
								$result['height'] = $comboData['height'];
						}
					}
				}
			}
			foreach ($attributes as $attribute_id => $attribute_value_id) {
				if( !isset($product['attributes'][$attribute_id]) )
					continue;
				$attr = $product['attributes'][$attribute_id];
				$attributes_strings[] = $attr['name'] . ' - ' . $attr['values'][$attribute_value_id]['value'];
				$attribute_values_strings[] = $attr['values'][$attribute_value_id]['value'];
				$applied_attributes[$attribute_id] = $attribute_value_id;
				$attributes_info[$attribute_id] = array(
					'name' => $attr['name'],
					'value' => $attr['values'][$attribute_value_id]['value']
				);
			}
		}

		$percentage_discount = floatval(v($product['percentage_discount'], 0));
		if ($percentage_discount > 0 and $percentage_discount < 100)
			$discount = max($discount, floor($price * $percentage_discount) / 100); // choose a better discount: absolute or percentage

		$result['real_price'] = $price - $discount;
		$result['price'] = $price;
		$result['discount'] = $discount;
		$result['percentage_discount'] = ($price > 0) ? ($discount * 100 / $price) : 0;
		$result['attributes_info'] = $attributes_info;
		$result['attributes_string'] = implode('; ', $attributes_strings);
		$result['attribute_values'] = $attribute_values_strings;
		$result['attribute_values_string'] = implode('; ', $attribute_values_strings);
		$result['applied_attributes'] = $applied_attributes;
		$result['post_price_attributes'] = $applied_attributes;

		return $result;
	}

	/**
	 * 
	 * @param int $id - product id
	 * @return boolean - success
	 */
	public function addView($id) {
		$query = "UPDATE {$this->db_prefix}shop_products SET views=views+1 WHERE id = ?";
		$r = $this->prepare($query);

		return $r->execute(array($id));
	}

}